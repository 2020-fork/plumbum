.. _guide-color:

Color tools
===========

.. versionadded:: 1.5.0


The purpose of the `plumbum.color` library is to make adding
color to your scripts easy and safe. Color is often a great
addition, but not a necessity, and implementing it properly 
is tricky.
A built in color module provides quick, clean access to ANSI colors for your scripts. 

Colors are
accessed through the ``COLOR`` object, which is a collection of ``Style`` objects. The ``COLOR`` object has the following properties:

    ``FG`` and ``BG``
      The forground and background colors, reset to default with ``COLOR.FG.RESET``
      or ``-COLOR.FG`` and likewise for ``BG``. (Named forground colors are available
      directly as well). The primary colors, ``BLACK``, ``RED``, ``GREEN``, ``YELLOW``,
      ``BLUE``, ``MAGENTA``, ``CYAN``, ``WHITE``, as well as ``RESET``, are available.
      You can also access colors numerically with ``COLOR.FG(n)``, for the standard colors,
      and ``COLOR.FG[n]`` for the extended 256 color codes, and likewise for ``BG``.
    ``BOLD``, ``DIM``, ``UNDERLINE``, ``BLINK``, ``REVERSE``, and ``HIDDEN``
      All the `ANSI` modifiers are available, as well as their negations, sush as ``-COLOR.BOLD``, etc.
    ``RESET``
      The global reset will restore all properties at once.
    ``DO_NOTHING``
      Does nothing at all, but otherwise acts like any ``Style`` object. It is its own inverse. Useful for ``cli`` properties.

A color can be used directly as if it was a string,
or called for immediate printing to ``stdout``. Calling a
color with an argument will wrap the string in the color and the matching negation.
Any color can be used as the target of a with statement, and normal color
will be restored on exiting the with statement, even with an Exception. 
 
An example of the usage of ``COLOR``::

    from plumbum import COLOR
    with COLOR.FG.RED:
        print('This is in red')
        COLOR.FG.GREEN()
        print('This is green')
    print('This is completly restored, even if an exception is thrown!')

We could have used the shortcut ``COLOR.GREEN()`` instead. You can also use ``COLOR``
directly as a context manager if you only want the restoring ability, and if you call
``COLOR(...)``, you can manually pass in any `ANSI` escape sequence.

Further examples of manipulations possible with the library::

    print(COLOR.FG.YELLOW('This is yellow') + ' And this is normal again')
    with COLOR:
        print('It is always a good idea to be in a context manager, to avoid being',
              'left with a colored terminal if there is an exception!')
        COLOR.FG.RED()
        print(COLOR.BOLD("This is red, bold, and exciting!"), "And this is red only.")
        print(COLOR.BG.CYAN + "This is red on a cyan background." + COLOR.RESET)
        print(COLOR.FG[42] + "If your terminal supports 256 colors, this is colorful!" + COLOR.RESET)
        COLOR.YELLOW()
        print('Colors made', COLOR.UNDERLINE + 'very' - COLOR.UNDERLINE, 'easy!')

The name of a script is automatically colored with the ``.COLOR_NAME`` property. Other style properties may be added; they will be set to ``COLOR.DO_NOTHING``, but can be overriden by your class. Any callable can be used to provide formats.

.. note::
    The color library looks for a tty terminal and posix operating
    system and only creates colors if those are found. If you want to manually
    enable or disable color, you can set ``plumbum.color.Style.use_color = True``
    (or ``False``); however, this will only
    affect new objects or manipulations. All Style color objects are dynamically
    generated, so this usually is not a problem.


256 color support
-----------------

The library support 256 colors through numbers, names or HEX html codes. You can access them
as COLOR.FG[12], COLOR.FG['Light_Blue'], COLOR.FG['LightBlue'], or COLOR.FG['#0000FF']. The supported colors are:

.. raw:: html
    :file: _color_list.html

The Classes
-----------

The library works through the ``Style`` class. It is a subclass of ``str`` that adds color related methods. It can be called without arguments to print to `Style.stdout`, and with arguments to wrap a string in the current Style and its negation.

The colors are generated by two ``ColorCollection`` objects, one for forground and one for background. They are part of the main ``COLOR`` object, which also acts like a ``ColorCollection`` (foreground).


See Also
--------
* `colored <https://pypi.python.org/pypi/colored>`_ Another library with 256 color support
* `colorama <https://pypi.python.org/pypi/colorama>`_ A library that supports colored text on Windows
